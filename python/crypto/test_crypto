# crypto test cases
# pip install pycryptodome
import os
import json
from Crypto.Cipher import DES3
config_dir = 'crypto/'
config_file = 'test_crypto.json'

#-----------------------------------------------------------------------------------
# DES_adjust_to_3DES : If key is single des or double des convert to a tripple DES
#-----------------------------------------------------------------------------------
def DES_adjust_to_3DES(key):
    if len(key) == 48 : 
          return key; # alread 3 * 0 bytes i.e. 48 chars
    if len(key) == 32 :
         return key + key[0: 16]  # double des set k3 = K1 
    if len(key) == 16:
         return key + key + key # single des set k2=k1, k3=k1
    print("illegal key len")
    return key
#-------------------------------------------------------------
# create_DES_cipher_obj()
#-------------------------------------------------------------
def create_DES_cipher_obj(mode, key_value, iv):
    key_value = DES_adjust_to_3DES(key_value)
    key_bin = bytes.fromhex(key_value)
    key_token = DES3.adjust_key_parity(key_bin)

    if (mode == "ECB"):
        mode_bin = DES3.MODE_ECB
        return DES3.new(key_token, mode_bin)
    if (mode == "CCB"):
        iv_bin = bytes.fromhex(iv)  
        mode_bin = DES3.MODE_CCB

#---------------------------------------------
# hex_string_xor(s1, s2)
# https://stackoverflow.com/questions/52851023/python-3-xor-bytearrays
#---------------------------------------------
def hex_string_xor(s1, s2):
    one = bytes.fromhex(s1)
    two = bytes.fromhex(s2)
    one_xor_two = bytes(a ^ b for (a, b) in zip(one, two))
    return one_xor_two.hex()

#-------------------------------------------
# run_test: Run a crypto test case
#-------------------------------------------
def run_test(crypto_keys, test_case):
    description = test_case['description']
    alg =  test_case['alg']
    expected_result = test_case["expected_result"].lower()
    result_hex = ""

    if (alg == 'DES' or alg == 'AES'):
        key_name = test_case["key_name"]
        key_value = crypto_keys[key_name]
        cipher_obj = create_DES_cipher_obj(test_case['mode'], key_value, test_case['IV']) 
        if (test_case['operation'] == "encrypt"):
            data_bin = bytes.fromhex(test_case["plain"])
            result_hex = cipher_obj.encrypt(data_bin).hex()
        else:
            data_bin = bytes.fromhex(test_case["cipher"])
            result_hex = cipher_obj.decrypt(data_bin).hex()

    if (alg == "XOR"):
        result_hex = hex_string_xor(test_case["s1"], test_case["s2"]) 

    if (result_hex == expected_result):
       result = "Success"
    else:
        result = "Fail"
    print("test:" + description + " result:" + result + " result_hex:" + result_hex + " expected:" + expected_result)
#-----------------------------------------------------------------------------------------
# load config ... load the test_rest.json who has the test cases and connection details.
#-----------------------------------------------------------------------------------------
def load_config():
    with open(config_dir +  config_file, 'r') as file:
        json_data = file.read()
        return json.loads(json_data)
#-----------------------------------------------------------------------------------------
# run_tests:  Run all tests in the config['tests'l
#-----------------------------------------------------------------------------------------
def run_tests(config):
    crypto_keys = config['crypto_keys']
    for key in config['tests']:
        test_case_name= str(key)
        test_case = config['tests'][test_case_name]
        run_test(crypto_keys, test_case)
    
# here we go
print('current directory:' + os.getcwd())
config = load_config()
 
run_tests(config)